{
	parser: 'babel-eslint',
	parserOptions: {
		ecmaVersion: 6,
		sourceType: 'module'
	},
	extends: ['vue'],
	// required to lint *.vue files
	plugins: [
		'vue',
		'html'
	]
}
// {
// 	root: true,
// 	parser: 'babel-eslint',
// 	env: {
// 		es6: true,
// 		browser: true//,
// 		// jquery: true,
// 		// phantomjs: true
// 	},
// 	//global vars in webpack define plugin
// 	//process contains NODE enviornment variables (development, production)
// 	"globals": {
// 		"process": true,
// 		"global": true
// 	},
// 	parserOptions: {
// 		ecmaVersion: 6,
// 		sourceType: 'module'
// 	},
// 	// https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style
// 	extends: ['eslint:standard'],
// 	// required to lint *.vue files
// 	plugins: [
// 		'html'
// 	],
// 	// add your custom rules here
// 	//http://eslint.org/docs/rules/
// 	'rules': {
// 		'no-var': 1,
// 		'space-before-blocks': 1,
// 		// require or disallow space before function opening parenthesis
// 		'space-before-function-paren': [1, { anonymous: 'always', named: 'never' }],
// 		// require or disallow spaces inside parentheses
// 		'space-in-parens': [1, 'never'],
// 		// require spaces around operators
// 		'space-infix-ops': 1,
// 		quotes: [1, 'single', {
// 			avoidEscape: true,
// 			allowTemplateLiterals: true
// 		}],
// 		// require or disallow use of semicolons instead of ASI
// 		semi: [1, 'always'],
// 		// enforce spacing before and after semicolons
// 		'semi-spacing': [1, { before: false, after: true }],
// 		'quote-props': [1, 'as-needed', { keywords: false, unnecessary: true, numbers: false }],
// 		'no-unneeded-ternary': [1, { defaultAssignment: false }],
// 		// disallow whitespace before properties
// 		// http://eslint.org/docs/rules/no-whitespace-before-property
// 		'no-whitespace-before-property': 1,
// 		// require padding inside curly braces
// 		'object-curly-spacing': [1, 'always'],
// 		// allow just one var statement per function
// 		'one-var': [1, 'never'],
// 		// require a newline around variable declaration
// 		'one-var-declaration-per-line': [1, 'always'],
// 		// disallow space between function identifier and application
// 		'no-spaced-func': 1,
// 		// disallow trailing whitespace at the end of lines
// 		'no-trailing-spaces': 1,
// 		'no-mixed-spaces-and-tabs': 1,
// 		// disallow multiple empty lines and only one newline at the end
// 		'no-multiple-empty-lines': [1, { max: 2, maxEOF: 1 }],

// 		'no-array-constructor': 1,
// 		'max-nested-callbacks': [1, 5], // TODO: get feed-back
// 		// require a capital letter for constructors
// 		'new-cap': [1, { newIsCap: true }],
// 		// disallow the omission of parentheses when invoking a constructor with no arguments
// 		'new-parens': 1,
// 		// this option sets a specific tab width for your code
// 		indent: [1, 'tab', { SwitchCase: 1 }],
// 		// specify whether double or single quotes should be used in JSX attributes
// 		// http://eslint.org/docs/rules/jsx-quotes
// 		'jsx-quotes': [1, 'prefer-double'],
// 		// enforces spacing between keys and values in object literal properties
// 		'key-spacing': [1, { beforeColon: false, afterColon: true }],
// 		// require a space before & after certain keywords
// 		'keyword-spacing': [1, {
//             before: true,
//             after: true,
//             overrides: {
//                 return: { after: true },
//                 throw: { after: true },
//                 case: { after: true }
//             }
// 		}],
// 		// enforce spacing inside array brackets
// 		'array-bracket-spacing': [1, 'never'],
// 		// disallow or enforce spaces inside of single line blocks
// 		'block-spacing': [1, 'always'],
// 		// enforce one true brace style
// 		'brace-style': [1, '1tbs', { allowSingleLine: true }],
// 		// require camel case names
// 		camelcase: [1, { properties: 'never' }], // because of .NET serialization not for properties
// 		// enforce spacing before and after comma
// 		'comma-spacing': [1, { before: false, after: true }],
// 		// enforce one true comma style
// 		'comma-style': [1, 'last'],
// 		// disallow padding inside computed properties
// 		'computed-property-spacing': [1, 'never'],
// 		// enforces consistent naming when capturing the current execution context
// 		'consistent-this': [1, 'that'], // TODO: get feedback
// 		// enforce newline at the end of file, with no multiple empty lines
// 		'eol-last': 1,
// 		//*******************ES6*********/
// 		'arrow-parens': [1, 'as-needed'],
// 		// require space before/after arrow function's arrow
// 		'arrow-spacing': [1, { before: true, after: true }],
// 		// verify super() callings in constructors
// 		'constructor-super': 1,
// 		// enforce the spacing around the * in generator functions
// 		'generator-star-spacing': 1,
// 		// disallow modifying variables of class declarations
// 		'no-class-assign': 1,
// 		// disallow arrow functions where they could be confused with comparisons
// 		'no-confusing-arrow': [1, { allowParens: false }],
// 		// disallow modifying variables that are declared using const
// 		'no-const-assign': 1,
// 		// disallow duplicate name in class members
// 		'no-dupe-class-members': 1,
// 		// disallow symbol constructor
// 		'no-new-symbol': 1,
// 		'no-this-before-super': 1,
// 		// disallow unnecessary constructor
// 		'no-useless-constructor': 1,
// 		// require let or const instead of var
// 		'no-var': 1,
// 		// require method and property shorthand syntax for object literals
// 		'object-shorthand': [1, 'always'],
// 		// suggest using arrow functions as callbacks
// 		'prefer-arrow-callback': 1,
// 		// suggest using template literals instead of string concatenation
// 		'prefer-template': 1,
// 		// disallow generator functions that do not have yield
// 		'require-yield': 2,
// 		// enforce usage of spacing in template strings
// 		'template-curly-spacing': [1, 'never'],
// 		// enforce spacing around the * in yield* expressions
// 		'yield-star-spacing': [1, 'after'],
// 		// 'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0.
// 		//**********BEST PRACTICE*********************

// 		// enforces getter/setter pairs in objects
// 		'accessor-pairs': 1,
// 		// enforces return statements in callbacks of array's methods
// 		'array-callback-return': 1,
// 		// treat var statements as if they were block scoped
// 		'block-scoped-var': 1,
// 		// require return statements to either always or never specify values
// 		'consistent-return': 1,
// 		// specify curly brace conventions for all control statements
// 		curly: [1, 'multi-line'],
// 		// require default case in switch statements
// 		'default-case': 1,
// 		// enforces consistent newlines before or after dots
// 		'dot-location': 0,
// 		// encourages use of dot notation whenever possible
// 		'dot-notation': [0, { allowKeywords: true }], // F2 mixes this too much to have on
// 		// require the use of === and !==
// 		eqeqeq: 1,
// 		// make sure for-in loops have an if statement
// 		'guard-for-in': 1,
// 		// disallow use of arguments.caller or arguments.callee
// 		'no-caller': 1,
// 		// disallow lexical declarations in case/default clauses
// 		'no-case-declarations': 1,
// 		// disallow else after a return in an if
// 		'no-else-return': 1,
// 		// disallow use of empty functions
// 		'no-empty-function': [1, { allow: ['constructors'] }],
// 		// disallow use of empty destructuring patterns
// 		'no-empty-pattern': 1,
// 		// disallow comparisons to null without a type-checking operator
// 		'no-eq-null': 1,
// 		// disallow use of eval()
// 		'no-eval': 2,
// 		// disallow adding to native types
// 		'no-extend-native': 0,
// 		// disallow unnecessary function binding
// 		'no-extra-bind': 1,
// 		// disallow Unnecessary Labels
// 		'no-extra-label': 1,
// 		// disallow fallthrough of case statements
// 		'no-fallthrough': 1,
// 		// disallow the use of leading or trailing decimal points in numeric literals
// 		'no-floating-decimal': 1,
// 		// disallow var and named functions in global scope
// 		'no-implicit-globals': 1,
// 		// disallow use of eval()-like methods
// 		'no-implied-eval': 2,
// 		// disallow this keywords outside of classes or class-like objects
// 		'no-invalid-this': 2,
// 		// disallow usage of __iterator__ property
// 		'no-iterator': 2,
// 		// disallow use of labels for anything other then loops and switches
// 		'no-labels': [1, { allowLoop: false, allowSwitch: false }],
// 		// disallow unnecessary nested blocks
// 		'no-lone-blocks': 1,
// 		// disallow creation of functions within loops
// 		'no-loop-func': 1,
// 		// disallow use of multiple spaces
// 		'no-multi-spaces': 1,
// 		// disallow use of multiline strings
// 		'no-multi-str': 1,
// 		// disallow reassignments of native objects
// 		'no-native-reassign': 1,
// 		// disallow use of new operator when not part of the assignment or comparison
// 		'no-new': 1,
// 		// disallow use of new operator for Function object
// 		'no-new-func': 1,
// 		// disallows creating new instances of String, Number, and Boolean
// 		'no-new-wrappers': 1,
// 		// disallow use of (old style) octal literals
// 		'no-octal': 1,
// 		// disallow use of octal escape sequences in string literals, such as
// 		// var foo = 'Copyright \251';
// 		'no-octal-escape': 1,
// 		// disallow usage of __proto__ property
// 		'no-proto': 2,
// 		// disallow declaring the same variable more then once
// 		'no-redeclare': 1,
// 		// disallow use of assignment in return statement
// 		'no-return-assign': 1,
// 		// disallow use of `javascript:` urls.
// 		'no-script-url': 1,
// 		// disallow assignments where both sides are exactly the same
// 		'no-self-assign': 1,
// 		// disallow comparisons where both sides are exactly the same
// 		'no-self-compare': 1,
// 		// disallow use of comma operator
// 		'no-sequences': 1,
// 		// restrict what can be thrown as an exception
// 		'no-throw-literal': 1,
// 		// disallow usage of expressions in statement position
// 		'no-unused-expressions': [1, { allowShortCircuit: true, allowTernary: true }],
// 		// disallow unused labels
// 		'no-unused-labels': 1,
// 		// disallow unnecessary .call() and .apply()
// 		'no-useless-call': 1, // TODO: legecy should have this be 0
// 		// disallow use of void operator
// 		'no-void': 1,
// 		// disallow use of the with statement
// 		'no-with': 1,
// 		// require use of the second argument for parseInt()
// 		radix: 1,
// 		// require immediate function invocation to be wrapped in parentheses
// 		'wrap-iife': [1, 'inside'],
// 		// require or disallow Yoda conditions
// 		yoda: 1,
// 		// allow only debug and error console logs
// 		'no-console': [1, { 'allow': ['debug', 'error'] } ]	
// 	}	
// }